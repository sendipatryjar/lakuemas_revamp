plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"

    // START: FlutterFire Configuration
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
    // END: FlutterFire Configuration
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


android {
    compileSdkVersion 34
    // ndkVersion flutter.ndkVersion
    ndkVersion "21.3.6528147"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.lakuemas.app"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion 22
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            shrinkResources false
            minifyEnabled false
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug

        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "app", "distribute"
    productFlavors {
        dev {
            dimension "app"
            resValue "string", "app_name", "Lakuemas Dev"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }
        staging {
            dimension "app"
            resValue "string", "app_name", "Lakuemas Staging"
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
        }
        production {
            dimension "app"
            resValue "string", "app_name", "Lakuemas Revamp"
            applicationIdSuffix ".rev"
            versionNameSuffix "-revamp"
        }
        //
        appCenter {
            dimension "distribute"
        }

        googlePlay {
            dimension "distribute"
        }
    }

    // This is likely needed, see https://github.com/flutter/flutter/issues/58247
    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def taskSuffix = variant.name.capitalize()
            def bundleTaskName = "bundle${taskSuffix}"
            if (tasks.findByName(bundleTaskName)) {
                def copyAABTask = tasks.create(name: "copyAndRenameAab${taskSuffix}", type: Copy) {
                    def bundleBuildDir = "${buildDir}/outputs/bundle"
                    def flavorsCapitalized = variant.productFlavors.name.withIndex().collect { flavor, index -> index == 0 ? flavor : flavor.capitalize() }
                    def originalDirPath = "${flavorsCapitalized.join()}${variant.buildType.name.capitalize()}"
                    def originalFileName = "${project.archivesBaseName}-${variant.productFlavors.name.join('-')}-${variant.buildType.name}.aab"
                    def newFileName = "${project.archivesBaseName}-${variant.productFlavors.name.join('')}-${variant.buildType.name}.aab"
                    from "${bundleBuildDir}/${originalDirPath}/${originalFileName}"
                    // into "${bundleBuildDir}/${variant.buildType.name}/"
                    into "${bundleBuildDir}/${originalDirPath}"
                    // rename("${originalFileName}", "app.aab")
                    rename("${originalFileName}", "${newFileName}")
                }
                tasks[bundleTaskName].finalizedBy = [copyAABTask]
            }
        }
    }

}

flutter {
    source '../..'
}


dependencies {
    implementation project(':unityLibrary')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.20"

    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:32.1.1')
    // TODO: Add the dependencies for Firebase products you want to use
    // When using the BoM, don't specify versions in Firebase dependencies
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'

    def appCenterSdkVersion = '4.4.5'
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"
}
