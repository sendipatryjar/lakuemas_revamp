// Mocks generated by Mockito 5.4.4 from annotations
// in lakuemas/test/features/otp/domain/usecases/send_otp_uc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:lakuemas/cores/errors/app_failure.dart' as _i5;
import 'package:lakuemas/features/otp/domain/repositories/i_otp_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IOtpRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIOtpRepository extends _i1.Mock implements _i3.IOtpRepository {
  MockIOtpRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AppFailure, bool>> sendOtp({
    String? username,
    int? otpType,
    int? otpLocation,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendOtp,
          [],
          {
            #username: username,
            #otpType: otpType,
            #otpLocation: otpLocation,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.AppFailure, bool>>.value(
            _FakeEither_0<_i5.AppFailure, bool>(
          this,
          Invocation.method(
            #sendOtp,
            [],
            {
              #username: username,
              #otpType: otpType,
              #otpLocation: otpLocation,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppFailure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.AppFailure, bool?>> verifyOtp({
    String? username,
    String? otpCode,
    int? otpLocation,
    int? otpType,
    String? privyId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyOtp,
          [],
          {
            #username: username,
            #otpCode: otpCode,
            #otpLocation: otpLocation,
            #otpType: otpType,
            #privyId: privyId,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.AppFailure, bool?>>.value(
            _FakeEither_0<_i5.AppFailure, bool?>(
          this,
          Invocation.method(
            #verifyOtp,
            [],
            {
              #username: username,
              #otpCode: otpCode,
              #otpLocation: otpLocation,
              #otpType: otpType,
              #privyId: privyId,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppFailure, bool?>>);
}
