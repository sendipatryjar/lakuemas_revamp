// Mocks generated by Mockito 5.4.4 from annotations
// in lakuemas/test/features/sell_gold/domain/usecases/get_balances_uc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:lakuemas/cores/errors/app_failure.dart' as _i5;
import 'package:lakuemas/features/_core/transaction/domain/entities/checkout_entity.dart'
    as _i8;
import 'package:lakuemas/features/_core/transaction/domain/entities/price_entity.dart'
    as _i7;
import 'package:lakuemas/features/_core/user/domain/entities/balance_entity.dart'
    as _i6;
import 'package:lakuemas/features/sell_gold/domain/entities/checkout_confirm_entity.dart'
    as _i9;
import 'package:lakuemas/features/sell_gold/domain/repositories/i_sell_gold_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ISellGoldRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockISellGoldRepository extends _i1.Mock
    implements _i3.ISellGoldRepository {
  MockISellGoldRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AppFailure, List<_i6.BalanceEntity>>>
      getBalances() => (super.noSuchMethod(
            Invocation.method(
              #getBalances,
              [],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.AppFailure, List<_i6.BalanceEntity>>>.value(
                _FakeEither_0<_i5.AppFailure, List<_i6.BalanceEntity>>(
              this,
              Invocation.method(
                #getBalances,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.AppFailure, List<_i6.BalanceEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.AppFailure, _i7.PriceEntity>> getPrice() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPrice,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.AppFailure, _i7.PriceEntity>>.value(
                _FakeEither_0<_i5.AppFailure, _i7.PriceEntity>(
          this,
          Invocation.method(
            #getPrice,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppFailure, _i7.PriceEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.AppFailure, _i8.CheckoutEntity>> checkout({
    double? amount,
    String? amountType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkout,
          [],
          {
            #amount: amount,
            #amountType: amountType,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.AppFailure, _i8.CheckoutEntity>>.value(
                _FakeEither_0<_i5.AppFailure, _i8.CheckoutEntity>(
          this,
          Invocation.method(
            #checkout,
            [],
            {
              #amount: amount,
              #amountType: amountType,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppFailure, _i8.CheckoutEntity>>);

  @override
  _i4.Future<
      _i2.Either<_i5.AppFailure, _i9.CheckoutConfirmEntity>> checkoutConfirm(
          {String? transactionKey}) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkoutConfirm,
          [],
          {#transactionKey: transactionKey},
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.AppFailure, _i9.CheckoutConfirmEntity>>.value(
            _FakeEither_0<_i5.AppFailure, _i9.CheckoutConfirmEntity>(
          this,
          Invocation.method(
            #checkoutConfirm,
            [],
            {#transactionKey: transactionKey},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppFailure, _i9.CheckoutConfirmEntity>>);
}
