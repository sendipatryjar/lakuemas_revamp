// Mocks generated by Mockito 5.4.4 from annotations
// in lakuemas/test/features/account_balance/domain/usecases/get_bank_me_uc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:lakuemas/cores/errors/app_failure.dart' as _i5;
import 'package:lakuemas/features/_core/transaction/domain/entities/price_entity.dart'
    as _i8;
import 'package:lakuemas/features/account_balance/domain/entities/account_balance_faq_entity.dart'
    as _i7;
import 'package:lakuemas/features/account_balance/domain/entities/bank_me_entity.dart'
    as _i9;
import 'package:lakuemas/features/account_balance/domain/entities/mutation_entity.dart'
    as _i6;
import 'package:lakuemas/features/account_balance/domain/entities/withdrawal_entity.dart'
    as _i10;
import 'package:lakuemas/features/account_balance/domain/repositories/i_account_balance_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IAccountBalanceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAccountBalanceRepository extends _i1.Mock
    implements _i3.IAccountBalanceRepository {
  MockIAccountBalanceRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<
      _i2.Either<_i5.AppFailure, List<_i6.MutationEntity>>> getMutations({
    int? status,
    String? period,
    String? startDate,
    String? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMutations,
          [],
          {
            #status: status,
            #period: period,
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.AppFailure, List<_i6.MutationEntity>>>.value(
            _FakeEither_0<_i5.AppFailure, List<_i6.MutationEntity>>(
          this,
          Invocation.method(
            #getMutations,
            [],
            {
              #status: status,
              #period: period,
              #startDate: startDate,
              #endDate: endDate,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppFailure, List<_i6.MutationEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.AppFailure, List<_i7.AccountBalanceFaqEntity>>>
      getFaq() => (super.noSuchMethod(
            Invocation.method(
              #getFaq,
              [],
            ),
            returnValue: _i4.Future<
                _i2.Either<_i5.AppFailure,
                    List<_i7.AccountBalanceFaqEntity>>>.value(_FakeEither_0<
                _i5.AppFailure, List<_i7.AccountBalanceFaqEntity>>(
              this,
              Invocation.method(
                #getFaq,
                [],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.AppFailure, List<_i7.AccountBalanceFaqEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.AppFailure, _i8.PriceEntity>> getPrice() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPrice,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.AppFailure, _i8.PriceEntity>>.value(
                _FakeEither_0<_i5.AppFailure, _i8.PriceEntity>(
          this,
          Invocation.method(
            #getPrice,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppFailure, _i8.PriceEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.AppFailure, _i9.BankMeEntity>> getBankMe() =>
      (super.noSuchMethod(
        Invocation.method(
          #getBankMe,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.AppFailure, _i9.BankMeEntity>>.value(
                _FakeEither_0<_i5.AppFailure, _i9.BankMeEntity>(
          this,
          Invocation.method(
            #getBankMe,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppFailure, _i9.BankMeEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.AppFailure, _i10.WithdrawalEntity>> withdraw(
          {int? amount}) =>
      (super.noSuchMethod(
        Invocation.method(
          #withdraw,
          [],
          {#amount: amount},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.AppFailure, _i10.WithdrawalEntity>>.value(
                _FakeEither_0<_i5.AppFailure, _i10.WithdrawalEntity>(
          this,
          Invocation.method(
            #withdraw,
            [],
            {#amount: amount},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppFailure, _i10.WithdrawalEntity>>);
}
