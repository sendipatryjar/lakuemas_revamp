// Mocks generated by Mockito 5.4.4 from annotations
// in lakuemas/test/features/profile/data/repositories/profile_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:lakuemas/cores/models/base_resp.dart' as _i2;
import 'package:lakuemas/cores/services/local_data_source/i_token_local_data_source.dart'
    as _i3;
import 'package:lakuemas/features/_core/others/data/models/terms_and_conditions_model.dart'
    as _i11;
import 'package:lakuemas/features/_core/user/data/models/user_data_model.dart'
    as _i6;
import 'package:lakuemas/features/profile/data/data_sources/interfaces/i_profile_local_data_source.dart'
    as _i12;
import 'package:lakuemas/features/profile/data/data_sources/interfaces/i_profile_remote_data_source.dart'
    as _i5;
import 'package:lakuemas/features/profile/data/models/change_password_req.dart'
    as _i9;
import 'package:lakuemas/features/profile/data/models/change_pin_req.dart'
    as _i10;
import 'package:lakuemas/features/profile/data/models/update_address_req.dart'
    as _i8;
import 'package:lakuemas/features/profile/data/models/update_user_data_req.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBaseResp_0<T> extends _i1.SmartFake implements _i2.BaseResp<T> {
  _FakeBaseResp_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ITokenLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockITokenLocalDataSource extends _i1.Mock
    implements _i3.ITokenLocalDataSource {
  MockITokenLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveAccessToken(String? accToken) => (super.noSuchMethod(
        Invocation.method(
          #saveAccessToken,
          [accToken],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getAccessToken() => (super.noSuchMethod(
        Invocation.method(
          #getAccessToken,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> saveRefreshToken(String? refreshToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveRefreshToken,
          [refreshToken],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getRefreshToken() => (super.noSuchMethod(
        Invocation.method(
          #getRefreshToken,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}

/// A class which mocks [IProfileRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIProfileRemoteDataSource extends _i1.Mock
    implements _i5.IProfileRemoteDataSource {
  MockIProfileRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.BaseResp<_i6.UserDataModel>> getUserData({
    String? accessToken,
    String? refreshToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserData,
          [],
          {
            #accessToken: accessToken,
            #refreshToken: refreshToken,
          },
        ),
        returnValue: _i4.Future<_i2.BaseResp<_i6.UserDataModel>>.value(
            _FakeBaseResp_0<_i6.UserDataModel>(
          this,
          Invocation.method(
            #getUserData,
            [],
            {
              #accessToken: accessToken,
              #refreshToken: refreshToken,
            },
          ),
        )),
      ) as _i4.Future<_i2.BaseResp<_i6.UserDataModel>>);

  @override
  _i4.Future<_i2.BaseResp<dynamic>> updateUserData({
    String? accessToken,
    String? refreshToken,
    _i7.UpdateUserDataReq? request,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserData,
          [],
          {
            #accessToken: accessToken,
            #refreshToken: refreshToken,
            #request: request,
          },
        ),
        returnValue:
            _i4.Future<_i2.BaseResp<dynamic>>.value(_FakeBaseResp_0<dynamic>(
          this,
          Invocation.method(
            #updateUserData,
            [],
            {
              #accessToken: accessToken,
              #refreshToken: refreshToken,
              #request: request,
            },
          ),
        )),
      ) as _i4.Future<_i2.BaseResp<dynamic>>);

  @override
  _i4.Future<_i2.BaseResp<dynamic>> updateAddress({
    String? accessToken,
    String? refreshToken,
    _i8.UpdateAddressReq? request,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAddress,
          [],
          {
            #accessToken: accessToken,
            #refreshToken: refreshToken,
            #request: request,
          },
        ),
        returnValue:
            _i4.Future<_i2.BaseResp<dynamic>>.value(_FakeBaseResp_0<dynamic>(
          this,
          Invocation.method(
            #updateAddress,
            [],
            {
              #accessToken: accessToken,
              #refreshToken: refreshToken,
              #request: request,
            },
          ),
        )),
      ) as _i4.Future<_i2.BaseResp<dynamic>>);

  @override
  _i4.Future<_i2.BaseResp<dynamic>> changePassword({
    String? accessToken,
    String? refreshToken,
    _i9.ChangePasswordReq? request,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [],
          {
            #accessToken: accessToken,
            #refreshToken: refreshToken,
            #request: request,
          },
        ),
        returnValue:
            _i4.Future<_i2.BaseResp<dynamic>>.value(_FakeBaseResp_0<dynamic>(
          this,
          Invocation.method(
            #changePassword,
            [],
            {
              #accessToken: accessToken,
              #refreshToken: refreshToken,
              #request: request,
            },
          ),
        )),
      ) as _i4.Future<_i2.BaseResp<dynamic>>);

  @override
  _i4.Future<_i2.BaseResp<dynamic>> changePin({
    String? accessToken,
    String? refreshToken,
    _i10.ChangePinReq? request,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePin,
          [],
          {
            #accessToken: accessToken,
            #refreshToken: refreshToken,
            #request: request,
          },
        ),
        returnValue:
            _i4.Future<_i2.BaseResp<dynamic>>.value(_FakeBaseResp_0<dynamic>(
          this,
          Invocation.method(
            #changePin,
            [],
            {
              #accessToken: accessToken,
              #refreshToken: refreshToken,
              #request: request,
            },
          ),
        )),
      ) as _i4.Future<_i2.BaseResp<dynamic>>);

  @override
  _i4.Future<_i2.BaseResp<_i11.TermsAndConditionsModel>>
      getTermsAndConditionsProfile({
    String? accessToken,
    String? refreshToken,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getTermsAndConditionsProfile,
              [],
              {
                #accessToken: accessToken,
                #refreshToken: refreshToken,
              },
            ),
            returnValue:
                _i4.Future<_i2.BaseResp<_i11.TermsAndConditionsModel>>.value(
                    _FakeBaseResp_0<_i11.TermsAndConditionsModel>(
              this,
              Invocation.method(
                #getTermsAndConditionsProfile,
                [],
                {
                  #accessToken: accessToken,
                  #refreshToken: refreshToken,
                },
              ),
            )),
          ) as _i4.Future<_i2.BaseResp<_i11.TermsAndConditionsModel>>);
}

/// A class which mocks [IProfileLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIProfileLocalDataSource extends _i1.Mock
    implements _i12.IProfileLocalDataSource {
  MockIProfileLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveUserData(_i6.UserDataModel? userDataModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveUserData,
          [userDataModel],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i6.UserDataModel?> getUserData() => (super.noSuchMethod(
        Invocation.method(
          #getUserData,
          [],
        ),
        returnValue: _i4.Future<_i6.UserDataModel?>.value(),
      ) as _i4.Future<_i6.UserDataModel?>);

  @override
  _i4.Future<void> saveIsElite(bool? isElite) => (super.noSuchMethod(
        Invocation.method(
          #saveIsElite,
          [isElite],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> getIsElite() => (super.noSuchMethod(
        Invocation.method(
          #getIsElite,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
